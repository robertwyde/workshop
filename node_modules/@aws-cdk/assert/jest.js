"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const have_output_1 = require("./lib/assertions/have-output");
const have_resource_1 = require("./lib/assertions/have-resource");
const match_template_1 = require("./lib/assertions/match-template");
const expect_1 = require("./lib/expect");
expect.extend({
    toMatchTemplate(actual, template, matchStyle) {
        const assertion = match_template_1.matchTemplate(template, matchStyle);
        const inspector = expect_1.expect(actual);
        const pass = assertion.assertUsing(inspector);
        if (pass) {
            return {
                pass,
                message: () => `Not ` + assertion.description
            };
        }
        else {
            return {
                pass,
                message: () => assertion.description
            };
        }
    },
    toHaveResource(actual, resourceType, properties, comparison) {
        const assertion = new have_resource_1.HaveResourceAssertion(resourceType, properties, comparison, false);
        return applyAssertion(assertion, actual);
    },
    toHaveResourceLike(actual, resourceType, properties, comparison) {
        const assertion = new have_resource_1.HaveResourceAssertion(resourceType, properties, comparison, true);
        return applyAssertion(assertion, actual);
    },
    toHaveOutput(actual, props) {
        return applyAssertion(have_output_1.haveOutput(props), actual);
    }
});
function applyAssertion(assertion, actual) {
    const inspector = expect_1.expect(actual);
    const pass = assertion.assertUsing(inspector);
    if (pass) {
        return {
            pass,
            message: () => `Not ` + assertion.generateErrorMessage(),
        };
    }
    else {
        return {
            pass,
            message: () => assertion.generateErrorMessage(),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImplc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSw4REFBZ0Y7QUFDaEYsa0VBQXFGO0FBQ3JGLG9FQUE0RTtBQUM1RSx5Q0FBbUQ7QUFzQm5ELE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDWixlQUFlLENBQ2IsTUFBaUQsRUFDakQsUUFBYSxFQUNiLFVBQXVCO1FBRXZCLE1BQU0sU0FBUyxHQUFHLDhCQUFhLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sU0FBUyxHQUFHLGVBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTztnQkFDTCxJQUFJO2dCQUNKLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLFdBQVc7YUFDOUMsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPO2dCQUNMLElBQUk7Z0JBQ0osT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXO2FBQ3JDLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCxjQUFjLENBQ1YsTUFBaUQsRUFDakQsWUFBb0IsRUFDcEIsVUFBZ0IsRUFDaEIsVUFBeUI7UUFFM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6RixPQUFPLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELGtCQUFrQixDQUNkLE1BQWlELEVBQ2pELFlBQW9CLEVBQ3BCLFVBQWdCLEVBQ2hCLFVBQXlCO1FBRTNCLE1BQU0sU0FBUyxHQUFHLElBQUkscUNBQXFCLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEYsT0FBTyxjQUFjLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxZQUFZLENBQ1YsTUFBaUQsRUFDakQsS0FBMkI7UUFFM0IsT0FBTyxjQUFjLENBQUMsd0JBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsU0FBUyxjQUFjLENBQUMsU0FBZ0QsRUFBRSxNQUFpRDtJQUN6SCxNQUFNLFNBQVMsR0FBRyxlQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QyxJQUFJLElBQUksRUFBRTtRQUNSLE9BQU87WUFDTCxJQUFJO1lBQ0osT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsb0JBQW9CLEVBQUU7U0FDekQsQ0FBQztLQUNIO1NBQU07UUFDTCxPQUFPO1lBQ0wsSUFBSTtZQUNKLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUU7U0FDaEQsQ0FBQztLQUNIO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBjeGFwaSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuaW1wb3J0IHsgSmVzdEZyaWVuZGx5QXNzZXJ0aW9uIH0gZnJvbSAnLi9saWIvYXNzZXJ0aW9uJztcbmltcG9ydCB7IGhhdmVPdXRwdXQsIEhhdmVPdXRwdXRQcm9wZXJ0aWVzIH0gZnJvbSAnLi9saWIvYXNzZXJ0aW9ucy9oYXZlLW91dHB1dCc7XG5pbXBvcnQgeyBIYXZlUmVzb3VyY2VBc3NlcnRpb24sIFJlc291cmNlUGFydCB9IGZyb20gJy4vbGliL2Fzc2VydGlvbnMvaGF2ZS1yZXNvdXJjZSc7XG5pbXBvcnQgeyBNYXRjaFN0eWxlLCBtYXRjaFRlbXBsYXRlIH0gZnJvbSAnLi9saWIvYXNzZXJ0aW9ucy9tYXRjaC10ZW1wbGF0ZSc7XG5pbXBvcnQgeyBleHBlY3QgYXMgb3VyRXhwZWN0IH0gZnJvbSAnLi9saWIvZXhwZWN0JztcbmltcG9ydCB7IFN0YWNrSW5zcGVjdG9yIH0gZnJvbSAnLi9saWIvaW5zcGVjdG9yJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBuYW1lc3BhY2UgamVzdCB7XG4gICAgaW50ZXJmYWNlIE1hdGNoZXJzPFIsIFQ+IHtcbiAgICAgIHRvTWF0Y2hUZW1wbGF0ZSh0ZW1wbGF0ZTogYW55LFxuICAgICAgICAgICAgICAgICAgICAgIG1hdGNoU3R5bGU/OiBNYXRjaFN0eWxlKTogUjtcblxuICAgICAgdG9IYXZlUmVzb3VyY2UocmVzb3VyY2VUeXBlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzPzogYW55LFxuICAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbj86IFJlc291cmNlUGFydCk6IFI7XG5cbiAgICAgIHRvSGF2ZVJlc291cmNlTGlrZShyZXNvdXJjZVR5cGU6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzPzogYW55LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmlzb24/OiBSZXNvdXJjZVBhcnQpOiBSO1xuXG4gICAgICB0b0hhdmVPdXRwdXQocHJvcHM6IEhhdmVPdXRwdXRQcm9wZXJ0aWVzKTogUjtcbiAgICB9XG4gIH1cbn1cblxuZXhwZWN0LmV4dGVuZCh7XG4gIHRvTWF0Y2hUZW1wbGF0ZShcbiAgICBhY3R1YWw6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCB8IFN0YWNrLFxuICAgIHRlbXBsYXRlOiBhbnksXG4gICAgbWF0Y2hTdHlsZT86IE1hdGNoU3R5bGUpIHtcblxuICAgIGNvbnN0IGFzc2VydGlvbiA9IG1hdGNoVGVtcGxhdGUodGVtcGxhdGUsIG1hdGNoU3R5bGUpO1xuICAgIGNvbnN0IGluc3BlY3RvciA9IG91ckV4cGVjdChhY3R1YWwpO1xuICAgIGNvbnN0IHBhc3MgPSBhc3NlcnRpb24uYXNzZXJ0VXNpbmcoaW5zcGVjdG9yKTtcbiAgICBpZiAocGFzcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFzcyxcbiAgICAgICAgbWVzc2FnZTogKCkgPT4gYE5vdCBgICsgYXNzZXJ0aW9uLmRlc2NyaXB0aW9uXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXNzLFxuICAgICAgICBtZXNzYWdlOiAoKSA9PiBhc3NlcnRpb24uZGVzY3JpcHRpb25cbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHRvSGF2ZVJlc291cmNlKFxuICAgICAgYWN0dWFsOiBjeGFwaS5DbG91ZEZvcm1hdGlvblN0YWNrQXJ0aWZhY3QgfCBTdGFjayxcbiAgICAgIHJlc291cmNlVHlwZTogc3RyaW5nLFxuICAgICAgcHJvcGVydGllcz86IGFueSxcbiAgICAgIGNvbXBhcmlzb24/OiBSZXNvdXJjZVBhcnQpIHtcblxuICAgIGNvbnN0IGFzc2VydGlvbiA9IG5ldyBIYXZlUmVzb3VyY2VBc3NlcnRpb24ocmVzb3VyY2VUeXBlLCBwcm9wZXJ0aWVzLCBjb21wYXJpc29uLCBmYWxzZSk7XG4gICAgcmV0dXJuIGFwcGx5QXNzZXJ0aW9uKGFzc2VydGlvbiwgYWN0dWFsKTtcbiAgfSxcblxuICB0b0hhdmVSZXNvdXJjZUxpa2UoXG4gICAgICBhY3R1YWw6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCB8IFN0YWNrLFxuICAgICAgcmVzb3VyY2VUeXBlOiBzdHJpbmcsXG4gICAgICBwcm9wZXJ0aWVzPzogYW55LFxuICAgICAgY29tcGFyaXNvbj86IFJlc291cmNlUGFydCkge1xuXG4gICAgY29uc3QgYXNzZXJ0aW9uID0gbmV3IEhhdmVSZXNvdXJjZUFzc2VydGlvbihyZXNvdXJjZVR5cGUsIHByb3BlcnRpZXMsIGNvbXBhcmlzb24sIHRydWUpO1xuICAgIHJldHVybiBhcHBseUFzc2VydGlvbihhc3NlcnRpb24sIGFjdHVhbCk7XG4gIH0sXG5cbiAgdG9IYXZlT3V0cHV0KFxuICAgIGFjdHVhbDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IHwgU3RhY2ssXG4gICAgcHJvcHM6IEhhdmVPdXRwdXRQcm9wZXJ0aWVzKSB7XG5cbiAgICByZXR1cm4gYXBwbHlBc3NlcnRpb24oaGF2ZU91dHB1dChwcm9wcyksIGFjdHVhbCk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBhcHBseUFzc2VydGlvbihhc3NlcnRpb246IEplc3RGcmllbmRseUFzc2VydGlvbjxTdGFja0luc3BlY3Rvcj4sIGFjdHVhbDogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IHwgU3RhY2spIHtcbiAgY29uc3QgaW5zcGVjdG9yID0gb3VyRXhwZWN0KGFjdHVhbCk7XG4gIGNvbnN0IHBhc3MgPSBhc3NlcnRpb24uYXNzZXJ0VXNpbmcoaW5zcGVjdG9yKTtcbiAgaWYgKHBhc3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzcyxcbiAgICAgIG1lc3NhZ2U6ICgpID0+IGBOb3QgYCArIGFzc2VydGlvbi5nZW5lcmF0ZUVycm9yTWVzc2FnZSgpLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3MsXG4gICAgICBtZXNzYWdlOiAoKSA9PiBhc3NlcnRpb24uZ2VuZXJhdGVFcnJvck1lc3NhZ2UoKSxcbiAgICB9O1xuICB9XG59XG4iXX0=