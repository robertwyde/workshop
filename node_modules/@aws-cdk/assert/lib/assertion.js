"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Assertion {
    /**
     * Assert this thing and another thing
     */
    and(assertion) {
        // Needs to delegate to a function so that we can import mutually dependent classes in the right order
        return and(this, assertion);
    }
    assertOrThrow(inspector) {
        if (!this.assertUsing(inspector)) {
            throw new Error(`${JSON.stringify(inspector.value, null, 2)} does not match ${this.description}`);
        }
    }
}
exports.Assertion = Assertion;
class JestFriendlyAssertion extends Assertion {
}
exports.JestFriendlyAssertion = JestFriendlyAssertion;
const and_assertion_1 = require("./assertions/and-assertion");
function and(left, right) {
    return new and_assertion_1.AndAssertion(left, right);
}
const negated_assertion_1 = require("./assertions/negated-assertion");
function not(assertion) {
    return new negated_assertion_1.NegatedAssertion(assertion);
}
exports.not = not;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXJ0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBc0IsU0FBUztJQUs3Qjs7T0FFRztJQUNJLEdBQUcsQ0FBQyxTQUFvQztRQUM3QyxzR0FBc0c7UUFDdEcsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFTSxhQUFhLENBQUMsU0FBeUI7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLG1CQUFtQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUNuRztJQUNILENBQUM7Q0FDRjtBQWxCRCw4QkFrQkM7QUFFRCxNQUFzQixxQkFBd0QsU0FBUSxTQUF5QjtDQUs5RztBQUxELHNEQUtDO0FBRUQsOERBQTBEO0FBRTFELFNBQVMsR0FBRyxDQUFzQixJQUFrQixFQUFFLEtBQW1CO0lBQ3ZFLE9BQU8sSUFBSSw0QkFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsc0VBQWtFO0FBRWxFLFNBQWdCLEdBQUcsQ0FBc0IsU0FBdUI7SUFDOUQsT0FBTyxJQUFJLG9DQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFGRCxrQkFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluc3BlY3RvciB9IGZyb20gXCIuL2luc3BlY3RvclwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXNzZXJ0aW9uPEluc3BlY3RvckNsYXNzIGV4dGVuZHMgSW5zcGVjdG9yPiB7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nO1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBhc3NlcnRVc2luZyhpbnNwZWN0b3I6IEluc3BlY3RvckNsYXNzKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQXNzZXJ0IHRoaXMgdGhpbmcgYW5kIGFub3RoZXIgdGhpbmdcbiAgICovXG4gIHB1YmxpYyBhbmQoYXNzZXJ0aW9uOiBBc3NlcnRpb248SW5zcGVjdG9yQ2xhc3M+KTogQXNzZXJ0aW9uPEluc3BlY3RvckNsYXNzPiB7XG4gICAgLy8gTmVlZHMgdG8gZGVsZWdhdGUgdG8gYSBmdW5jdGlvbiBzbyB0aGF0IHdlIGNhbiBpbXBvcnQgbXV0dWFsbHkgZGVwZW5kZW50IGNsYXNzZXMgaW4gdGhlIHJpZ2h0IG9yZGVyXG4gICAgcmV0dXJuIGFuZCh0aGlzLCBhc3NlcnRpb24pO1xuICB9XG5cbiAgcHVibGljIGFzc2VydE9yVGhyb3coaW5zcGVjdG9yOiBJbnNwZWN0b3JDbGFzcykge1xuICAgIGlmICghdGhpcy5hc3NlcnRVc2luZyhpbnNwZWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7SlNPTi5zdHJpbmdpZnkoaW5zcGVjdG9yLnZhbHVlLCBudWxsLCAyKX0gZG9lcyBub3QgbWF0Y2ggJHt0aGlzLmRlc2NyaXB0aW9ufWApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSmVzdEZyaWVuZGx5QXNzZXJ0aW9uPEluc3BlY3RvckNsYXNzIGV4dGVuZHMgSW5zcGVjdG9yPiBleHRlbmRzIEFzc2VydGlvbjxJbnNwZWN0b3JDbGFzcz4ge1xuICAvKipcbiAgICogR2VuZXJhdGVzIGFuIGVycm9yIG1lc3NhZ2UgdGhhdCBjYW4gYmUgdXNlZCBieSBKZXN0LlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IGdlbmVyYXRlRXJyb3JNZXNzYWdlKCk6IHN0cmluZztcbn1cblxuaW1wb3J0IHsgQW5kQXNzZXJ0aW9uIH0gZnJvbSBcIi4vYXNzZXJ0aW9ucy9hbmQtYXNzZXJ0aW9uXCI7XG5cbmZ1bmN0aW9uIGFuZDxJIGV4dGVuZHMgSW5zcGVjdG9yPihsZWZ0OiBBc3NlcnRpb248ST4sIHJpZ2h0OiBBc3NlcnRpb248ST4pOiBBc3NlcnRpb248ST4ge1xuICByZXR1cm4gbmV3IEFuZEFzc2VydGlvbihsZWZ0LCByaWdodCk7XG59XG5cbmltcG9ydCB7IE5lZ2F0ZWRBc3NlcnRpb24gfSBmcm9tIFwiLi9hc3NlcnRpb25zL25lZ2F0ZWQtYXNzZXJ0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Q8VCBleHRlbmRzIEluc3BlY3Rvcj4oYXNzZXJ0aW9uOiBBc3NlcnRpb248VD4pOiBBc3NlcnRpb248VD4ge1xuICByZXR1cm4gbmV3IE5lZ2F0ZWRBc3NlcnRpb24oYXNzZXJ0aW9uKTtcbn1cbiJdfQ==