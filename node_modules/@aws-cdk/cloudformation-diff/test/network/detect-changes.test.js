"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const util_1 = require("../util");
test('detect addition of all types of rules', () => {
    // WHEN
    const diff = lib_1.diffTemplate({}, util_1.template({
        SG: util_1.resource('AWS::EC2::SecurityGroup', {
            SecurityGroupIngress: [
                {
                    CidrIp: '1.2.3.4/8',
                    FromPort: 80,
                    ToPort: 80,
                    IpProtocol: 'tcp',
                }
            ],
            SecurityGroupEgress: [
                {
                    DestinationSecurityGroupId: { 'Fn::GetAtt': ['ThatOtherGroup', 'GroupId'] },
                    FromPort: 80,
                    ToPort: 80,
                    IpProtocol: 'tcp',
                }
            ],
        }),
        InRule: util_1.resource('AWS::EC2::SecurityGroupIngress', {
            GroupId: { 'Fn::GetAtt': ['SG', 'GroupId'] },
            FromPort: -1,
            ToPort: -1,
            IpProtocol: 'icmp',
            SourcePrefixListId: 'pl-1234',
        }),
        OutRule: util_1.resource('AWS::EC2::SecurityGroupEgress', {
            GroupId: { 'Fn::GetAtt': ['SG', 'GroupId'] },
            FromPort: -1,
            ToPort: -1,
            IpProtocol: 'udp',
            CidrIp: '7.8.9.0/24',
        }),
    }));
    // THEN
    expect(diff.securityGroupChanges.toJson()).toEqual({
        ingressRuleAdditions: [
            {
                groupId: '${SG.GroupId}',
                ipProtocol: 'tcp',
                fromPort: 80,
                toPort: 80,
                peer: { kind: 'cidr-ip', ip: '1.2.3.4/8' }
            },
            {
                groupId: '${SG.GroupId}',
                ipProtocol: 'icmp',
                fromPort: -1,
                toPort: -1,
                peer: { kind: 'prefix-list', prefixListId: 'pl-1234' }
            }
        ],
        egressRuleAdditions: [
            {
                groupId: '${SG.GroupId}',
                ipProtocol: 'tcp',
                fromPort: 80,
                toPort: 80,
                peer: { kind: 'security-group', securityGroupId: '${ThatOtherGroup.GroupId}' }
            },
            {
                groupId: '${SG.GroupId}',
                ipProtocol: 'udp',
                fromPort: -1,
                toPort: -1,
                peer: { kind: 'cidr-ip', ip: '7.8.9.0/24' }
            }
        ]
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0ZWN0LWNoYW5nZXMudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRldGVjdC1jaGFuZ2VzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBeUM7QUFDekMsa0NBQTZDO0FBRTdDLElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7SUFDakQsT0FBTztJQUNQLE1BQU0sSUFBSSxHQUFHLGtCQUFZLENBQUMsRUFBRSxFQUFFLGVBQVEsQ0FBQztRQUNyQyxFQUFFLEVBQUUsZUFBUSxDQUFDLHlCQUF5QixFQUFFO1lBQ3RDLG9CQUFvQixFQUFFO2dCQUNwQjtvQkFDRSxNQUFNLEVBQUUsV0FBVztvQkFDbkIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osTUFBTSxFQUFFLEVBQUU7b0JBQ1YsVUFBVSxFQUFFLEtBQUs7aUJBQ2xCO2FBQ0Y7WUFDRCxtQkFBbUIsRUFBRTtnQkFDbkI7b0JBQ0UsMEJBQTBCLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsRUFBRTtvQkFDM0UsUUFBUSxFQUFFLEVBQUU7b0JBQ1osTUFBTSxFQUFFLEVBQUU7b0JBQ1YsVUFBVSxFQUFFLEtBQUs7aUJBQ2xCO2FBQ0Y7U0FDRixDQUFDO1FBQ0YsTUFBTSxFQUFFLGVBQVEsQ0FBQyxnQ0FBZ0MsRUFBRTtZQUNqRCxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUU7WUFDNUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNaLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtZQUNsQixrQkFBa0IsRUFBRSxTQUFTO1NBQzlCLENBQUM7UUFDRixPQUFPLEVBQUUsZUFBUSxDQUFDLCtCQUErQixFQUFFO1lBQ2pELE9BQU8sRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRTtZQUM1QyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQ1osTUFBTSxFQUFFLENBQUMsQ0FBQztZQUNWLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLE1BQU0sRUFBRSxZQUFZO1NBQ3JCLENBQUM7S0FDSCxDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU87SUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2pELG9CQUFvQixFQUFFO1lBQ3BCO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixVQUFVLEVBQUUsS0FBSztnQkFDakIsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osTUFBTSxFQUFFLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFO2FBQzNDO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLGVBQWU7Z0JBQ3hCLFVBQVUsRUFBRSxNQUFNO2dCQUNsQixRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNaLE1BQU0sRUFBRSxDQUFDLENBQUM7Z0JBQ1YsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFO2FBQ3ZEO1NBQ0Y7UUFDRCxtQkFBbUIsRUFBRTtZQUNuQjtnQkFDRSxPQUFPLEVBQUUsZUFBZTtnQkFDeEIsVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLFFBQVEsRUFBRSxFQUFFO2dCQUNaLE1BQU0sRUFBRSxFQUFFO2dCQUNWLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsMkJBQTJCLEVBQUU7YUFDL0U7WUFDRDtnQkFDRSxPQUFPLEVBQUUsZUFBZTtnQkFDeEIsVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ1osTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFDVixJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUU7YUFDNUM7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlmZlRlbXBsYXRlIH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IHJlc291cmNlLCB0ZW1wbGF0ZSB9IGZyb20gJy4uL3V0aWwnO1xuXG50ZXN0KCdkZXRlY3QgYWRkaXRpb24gb2YgYWxsIHR5cGVzIG9mIHJ1bGVzJywgKCkgPT4ge1xuICAvLyBXSEVOXG4gIGNvbnN0IGRpZmYgPSBkaWZmVGVtcGxhdGUoe30sIHRlbXBsYXRlKHtcbiAgICBTRzogcmVzb3VyY2UoJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwJywge1xuICAgICAgU2VjdXJpdHlHcm91cEluZ3Jlc3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIENpZHJJcDogJzEuMi4zLjQvOCcsXG4gICAgICAgICAgRnJvbVBvcnQ6IDgwLFxuICAgICAgICAgIFRvUG9ydDogODAsXG4gICAgICAgICAgSXBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBTZWN1cml0eUdyb3VwRWdyZXNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBEZXN0aW5hdGlvblNlY3VyaXR5R3JvdXBJZDogeyAnRm46OkdldEF0dCc6IFsnVGhhdE90aGVyR3JvdXAnLCAnR3JvdXBJZCddIH0sXG4gICAgICAgICAgRnJvbVBvcnQ6IDgwLFxuICAgICAgICAgIFRvUG9ydDogODAsXG4gICAgICAgICAgSXBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgfSksXG4gICAgSW5SdWxlOiByZXNvdXJjZSgnQVdTOjpFQzI6OlNlY3VyaXR5R3JvdXBJbmdyZXNzJywge1xuICAgICAgR3JvdXBJZDogeyAnRm46OkdldEF0dCc6IFsnU0cnLCAnR3JvdXBJZCddIH0sXG4gICAgICBGcm9tUG9ydDogLTEsXG4gICAgICBUb1BvcnQ6IC0xLFxuICAgICAgSXBQcm90b2NvbDogJ2ljbXAnLFxuICAgICAgU291cmNlUHJlZml4TGlzdElkOiAncGwtMTIzNCcsXG4gICAgfSksXG4gICAgT3V0UnVsZTogcmVzb3VyY2UoJ0FXUzo6RUMyOjpTZWN1cml0eUdyb3VwRWdyZXNzJywge1xuICAgICAgR3JvdXBJZDogeyAnRm46OkdldEF0dCc6IFsnU0cnLCAnR3JvdXBJZCddIH0sXG4gICAgICBGcm9tUG9ydDogLTEsXG4gICAgICBUb1BvcnQ6IC0xLFxuICAgICAgSXBQcm90b2NvbDogJ3VkcCcsXG4gICAgICBDaWRySXA6ICc3LjguOS4wLzI0JyxcbiAgICB9KSxcbiAgfSkpO1xuXG4gIC8vIFRIRU5cbiAgZXhwZWN0KGRpZmYuc2VjdXJpdHlHcm91cENoYW5nZXMudG9Kc29uKCkpLnRvRXF1YWwoe1xuICAgIGluZ3Jlc3NSdWxlQWRkaXRpb25zOiBbXG4gICAgICB7XG4gICAgICAgIGdyb3VwSWQ6ICcke1NHLkdyb3VwSWR9JyxcbiAgICAgICAgaXBQcm90b2NvbDogJ3RjcCcsXG4gICAgICAgIGZyb21Qb3J0OiA4MCxcbiAgICAgICAgdG9Qb3J0OiA4MCxcbiAgICAgICAgcGVlcjogeyBraW5kOiAnY2lkci1pcCcsIGlwOiAnMS4yLjMuNC84JyB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBncm91cElkOiAnJHtTRy5Hcm91cElkfScsXG4gICAgICAgIGlwUHJvdG9jb2w6ICdpY21wJyxcbiAgICAgICAgZnJvbVBvcnQ6IC0xLFxuICAgICAgICB0b1BvcnQ6IC0xLFxuICAgICAgICBwZWVyOiB7IGtpbmQ6ICdwcmVmaXgtbGlzdCcsIHByZWZpeExpc3RJZDogJ3BsLTEyMzQnIH1cbiAgICAgIH1cbiAgICBdLFxuICAgIGVncmVzc1J1bGVBZGRpdGlvbnM6IFtcbiAgICAgIHtcbiAgICAgICAgZ3JvdXBJZDogJyR7U0cuR3JvdXBJZH0nLFxuICAgICAgICBpcFByb3RvY29sOiAndGNwJyxcbiAgICAgICAgZnJvbVBvcnQ6IDgwLFxuICAgICAgICB0b1BvcnQ6IDgwLFxuICAgICAgICBwZWVyOiB7IGtpbmQ6ICdzZWN1cml0eS1ncm91cCcsIHNlY3VyaXR5R3JvdXBJZDogJyR7VGhhdE90aGVyR3JvdXAuR3JvdXBJZH0nIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGdyb3VwSWQ6ICcke1NHLkdyb3VwSWR9JyxcbiAgICAgICAgaXBQcm90b2NvbDogJ3VkcCcsXG4gICAgICAgIGZyb21Qb3J0OiAtMSxcbiAgICAgICAgdG9Qb3J0OiAtMSxcbiAgICAgICAgcGVlcjogeyBraW5kOiAnY2lkci1pcCcsIGlwOiAnNy44LjkuMC8yNCcgfVxuICAgICAgfVxuICAgIF1cbiAgfSk7XG59KTtcbiJdfQ==