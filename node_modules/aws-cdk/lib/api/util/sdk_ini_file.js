"use strict";
/**
 * A reimplementation of JS AWS SDK's SharedIniFile class
 *
 * We need that class to parse the ~/.aws/config file to determine the correct
 * region at runtime, but unfortunately it is private upstream.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
class SharedIniFile {
    constructor(options) {
        options = options || {};
        this.isConfig = options.isConfig === true;
        this.filename = options.filename || this.getDefaultFilepath();
    }
    async getProfile(profile) {
        await this.ensureFileLoaded();
        const profileIndex = profile !== AWS.util.defaultProfile && this.isConfig ?
            'profile ' + profile : profile;
        return this.parsedContents[profileIndex];
    }
    getDefaultFilepath() {
        return path.join(os.homedir(), '.aws', this.isConfig ? 'config' : 'credentials');
    }
    async ensureFileLoaded() {
        if (this.parsedContents) {
            return;
        }
        if (!await fs.pathExists(this.filename)) {
            this.parsedContents = {};
            return;
        }
        const contents = (await fs.readFile(this.filename)).toString();
        this.parsedContents = AWS.util.ini.parse(contents);
    }
}
exports.SharedIniFile = SharedIniFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrX2luaV9maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2RrX2luaV9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRzs7QUFFSCwrQkFBK0I7QUFDL0IsK0JBQStCO0FBQy9CLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFPN0IsTUFBYSxhQUFhO0lBS3hCLFlBQVksT0FBOEI7UUFDMUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUQsQ0FBQztJQUVNLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBZTtRQUN2QyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRTlCLE1BQU0sWUFBWSxHQUFHLE9BQU8sS0FBTSxHQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEYsVUFBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRWpDLE9BQU8sSUFBSSxDQUFDLGNBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU8sa0JBQWtCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FDZCxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQ1osTUFBTSxFQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUN6QyxDQUFDO0lBQ0YsQ0FBQztJQUVPLEtBQUssQ0FBQyxnQkFBZ0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO1lBQ3pCLE9BQU87U0FDUjtRQUVELE1BQU0sUUFBUSxHQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxjQUFjLEdBQUksR0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRjtBQXpDRCxzQ0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgcmVpbXBsZW1lbnRhdGlvbiBvZiBKUyBBV1MgU0RLJ3MgU2hhcmVkSW5pRmlsZSBjbGFzc1xuICpcbiAqIFdlIG5lZWQgdGhhdCBjbGFzcyB0byBwYXJzZSB0aGUgfi8uYXdzL2NvbmZpZyBmaWxlIHRvIGRldGVybWluZSB0aGUgY29ycmVjdFxuICogcmVnaW9uIGF0IHJ1bnRpbWUsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGlzIHByaXZhdGUgdXBzdHJlYW0uXG4gKi9cblxuaW1wb3J0ICogYXMgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcblxuZXhwb3J0IGludGVyZmFjZSBTaGFyZWRJbmlGaWxlT3B0aW9ucyB7XG4gIGlzQ29uZmlnPzogYm9vbGVhbjtcbiAgZmlsZW5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTaGFyZWRJbmlGaWxlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBpc0NvbmZpZzogYm9vbGVhbjtcbiAgcHJpdmF0ZSByZWFkb25seSBmaWxlbmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHBhcnNlZENvbnRlbnRzPzoge1trZXk6IHN0cmluZ106IHtba2V5OiBzdHJpbmddOiBzdHJpbmd9fTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogU2hhcmVkSW5pRmlsZU9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMuaXNDb25maWcgPSBvcHRpb25zLmlzQ29uZmlnID09PSB0cnVlO1xuICB0aGlzLmZpbGVuYW1lID0gb3B0aW9ucy5maWxlbmFtZSB8fCB0aGlzLmdldERlZmF1bHRGaWxlcGF0aCgpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFByb2ZpbGUocHJvZmlsZTogc3RyaW5nKSB7XG4gIGF3YWl0IHRoaXMuZW5zdXJlRmlsZUxvYWRlZCgpO1xuXG4gIGNvbnN0IHByb2ZpbGVJbmRleCA9IHByb2ZpbGUgIT09IChBV1MgYXMgYW55KS51dGlsLmRlZmF1bHRQcm9maWxlICYmIHRoaXMuaXNDb25maWcgP1xuICAgICdwcm9maWxlICcgKyBwcm9maWxlIDogcHJvZmlsZTtcblxuICByZXR1cm4gdGhpcy5wYXJzZWRDb250ZW50cyFbcHJvZmlsZUluZGV4XTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGVmYXVsdEZpbGVwYXRoKCk6IHN0cmluZyB7XG4gIHJldHVybiBwYXRoLmpvaW4oXG4gICAgb3MuaG9tZWRpcigpLFxuICAgICcuYXdzJyxcbiAgICB0aGlzLmlzQ29uZmlnID8gJ2NvbmZpZycgOiAnY3JlZGVudGlhbHMnXG4gICk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGVuc3VyZUZpbGVMb2FkZWQoKSB7XG4gIGlmICh0aGlzLnBhcnNlZENvbnRlbnRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFhd2FpdCBmcy5wYXRoRXhpc3RzKHRoaXMuZmlsZW5hbWUpKSB7XG4gICAgdGhpcy5wYXJzZWRDb250ZW50cyA9IHt9O1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRzOiBzdHJpbmcgPSAoYXdhaXQgZnMucmVhZEZpbGUodGhpcy5maWxlbmFtZSkpLnRvU3RyaW5nKCk7XG4gIHRoaXMucGFyc2VkQ29udGVudHMgPSAoQVdTIGFzIGFueSkudXRpbC5pbmkucGFyc2UoY29udGVudHMpO1xuICB9XG59XG4iXX0=