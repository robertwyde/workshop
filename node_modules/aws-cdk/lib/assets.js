"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:max-line-length
const cxapi = require("@aws-cdk/cx-api");
const colors = require("colors");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const archive_1 = require("./archive");
const docker_1 = require("./docker");
const logging_1 = require("./logging");
// tslint:disable-next-line:max-line-length
async function prepareAssets(stack, toolkitInfo, reuse) {
    reuse = reuse || [];
    const assets = stack.assets;
    if (assets.length === 0) {
        return [];
    }
    if (!toolkitInfo) {
        // tslint:disable-next-line:max-line-length
        throw new Error(`This stack uses assets, so the toolkit stack must be deployed to the environment (Run "${colors.blue("cdk bootstrap " + stack.environment.name)}")`);
    }
    let params = new Array();
    for (const asset of assets) {
        // FIXME: Should have excluded by construct path here instead of by unique ID, preferably using
        // minimatch so we can support globs. Maybe take up during artifact refactoring.
        const reuseAsset = reuse.indexOf(asset.id) > -1;
        if (reuseAsset) {
            logging_1.debug(`Preparing asset ${asset.id}: ${JSON.stringify(asset)} (reusing)`);
        }
        else {
            logging_1.debug(`Preparing asset ${asset.id}: ${JSON.stringify(asset)}`);
        }
        if (!stack.assembly) {
            throw new Error(`Unexpected: stack assembly is required in order to find assets in assemly directory`);
        }
        const assemblyDir = stack.assembly.directory;
        params = params.concat(await prepareAsset(assemblyDir, asset, toolkitInfo, reuseAsset));
    }
    return params;
}
exports.prepareAssets = prepareAssets;
// tslint:disable-next-line:max-line-length
async function prepareAsset(assemblyDir, asset, toolkitInfo, reuse) {
    switch (asset.packaging) {
        case 'zip':
            return await prepareZipAsset(assemblyDir, asset, toolkitInfo, reuse);
        case 'file':
            return await prepareFileAsset(assemblyDir, asset, toolkitInfo, reuse);
        case 'container-image':
            return await docker_1.prepareContainerAsset(assemblyDir, asset, toolkitInfo, reuse);
        default:
            // tslint:disable-next-line:max-line-length
            throw new Error(`Unsupported packaging type: ${asset.packaging}. You might need to upgrade your aws-cdk toolkit to support this asset type.`);
    }
}
async function prepareZipAsset(assemblyDir, asset, toolkitInfo, reuse) {
    if (reuse) {
        return await prepareFileAsset(assemblyDir, asset, toolkitInfo, reuse);
    }
    const dirPath = path.isAbsolute(asset.path) ? asset.path : path.join(assemblyDir, asset.path);
    if (!(await fs.pathExists(dirPath)) || !(await fs.stat(dirPath)).isDirectory()) {
        throw new Error(`Unable to find directory: ${dirPath}`);
    }
    logging_1.debug('Preparing zip asset from directory:', dirPath);
    const staging = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-assets'));
    try {
        const archiveFile = path.join(staging, 'archive.zip');
        await archive_1.zipDirectory(dirPath, archiveFile);
        logging_1.debug('zip archive:', archiveFile);
        return await prepareFileAsset(assemblyDir, asset, toolkitInfo, reuse, archiveFile, 'application/zip');
    }
    finally {
        await fs.remove(staging);
    }
}
/**
 * @param asset The asset descriptor
 * @param toolkitInfo The toolkit stack
 * @param filePath Alternative file path to use (instead of asset.path)
 * @param contentType Content-type to use when uploading to S3 (none will be specified by default)
 */
async function prepareFileAsset(assemblyDir, asset, toolkitInfo, reuse, filePath, contentType) {
    if (reuse) {
        return [
            { ParameterKey: asset.s3BucketParameter, UsePreviousValue: true },
            { ParameterKey: asset.s3KeyParameter, UsePreviousValue: true },
            { ParameterKey: asset.artifactHashParameter, UsePreviousValue: true },
        ];
    }
    filePath = filePath || asset.path;
    if (!path.isAbsolute(filePath)) {
        filePath = path.join(assemblyDir, filePath);
    }
    logging_1.debug('Preparing file asset:', filePath);
    const data = await fs.readFile(filePath);
    const s3KeyPrefix = `assets/${asset.id}/`;
    const { filename, key, changed, hash } = await toolkitInfo.uploadIfChanged(data, {
        s3KeyPrefix,
        s3KeySuffix: path.extname(filePath),
        contentType
    });
    const relativePath = path.relative(process.cwd(), asset.path);
    const s3url = `s3://${toolkitInfo.bucketName}/${key}`;
    logging_1.debug(`S3 url for ${relativePath}: ${s3url}`);
    if (changed) {
        logging_1.success(`Updated: ${colors.bold(relativePath)} (${asset.packaging})`);
    }
    else {
        logging_1.debug(`Up-to-date: ${colors.bold(relativePath)} (${asset.packaging})`);
    }
    return [
        { ParameterKey: asset.s3BucketParameter, ParameterValue: toolkitInfo.bucketName },
        { ParameterKey: asset.s3KeyParameter, ParameterValue: `${s3KeyPrefix}${cxapi.ASSET_PREFIX_SEPARATOR}${filename}` },
        { ParameterKey: asset.artifactHashParameter, ParameterValue: hash },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXNzZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQTJDO0FBQzNDLHlDQUF5QztBQUV6QyxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFFN0IsdUNBQXlDO0FBQ3pDLHFDQUFpRDtBQUNqRCx1Q0FBMkM7QUFFM0MsMkNBQTJDO0FBQ3BDLEtBQUssVUFBVSxhQUFhLENBQUMsS0FBd0MsRUFBRSxXQUF5QixFQUFFLEtBQWdCO0lBQ3ZILEtBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3BCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFFNUIsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN2QixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQiwyQ0FBMkM7UUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQywwRkFBMEYsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsV0FBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4SztJQUVELElBQUksTUFBTSxHQUFHLElBQUksS0FBSyxFQUE0QixDQUFDO0lBQ25ELEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQzFCLCtGQUErRjtRQUMvRixnRkFBZ0Y7UUFDaEYsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFaEQsSUFBSSxVQUFVLEVBQUU7WUFDZCxlQUFLLENBQUMsbUJBQW1CLEtBQUssQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDMUU7YUFBTTtZQUNMLGVBQUssQ0FBQyxtQkFB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Q0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5RCxNQUFNLEtBQUssR0FBRyxRQUFRLFdBQVcsQ0FBQyxVQUFVLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdEQsZUFBSyxDQUFDLGNBQWMsWUFBWSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDOUMsSUFBSSxPQUFPLEVBQUU7UUFDWCxpQkFBTyxDQUFDLFlBQVksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztLQUN2RTtTQUFNO1FBQ0wsZUFBSyxDQUFDLGVBQWUsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztLQUN4RTtJQUVELE9BQU87UUFDTCxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLFdBQVcsQ0FBQyxVQUFVLEVBQUU7UUFDakYsRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLGNBQWMsRUFBRSxjQUFjLEVBQUUsR0FBRyxXQUFXLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixHQUFHLFFBQVEsRUFBRSxFQUFFO1FBQ2xILEVBQUUsWUFBWSxFQUFFLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFO0tBQ3BFLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uIH0gZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnY29sb3JzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBUb29sa2l0SW5mbyB9IGZyb20gJy4vYXBpL3Rvb2xraXQtaW5mbyc7XG5pbXBvcnQgeyB6aXBEaXJlY3RvcnkgfSBmcm9tICcuL2FyY2hpdmUnO1xuaW1wb3J0IHsgcHJlcGFyZUNvbnRhaW5lckFzc2V0IH0gZnJvbSAnLi9kb2NrZXInO1xuaW1wb3J0IHsgZGVidWcsIHN1Y2Nlc3MgfSBmcm9tICcuL2xvZ2dpbmcnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlcGFyZUFzc2V0cyhzdGFjazogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0LCB0b29sa2l0SW5mbz86IFRvb2xraXRJbmZvLCByZXVzZT86IHN0cmluZ1tdKTogUHJvbWlzZTxDbG91ZEZvcm1hdGlvbi5QYXJhbWV0ZXJbXT4ge1xuICByZXVzZSA9IHJldXNlIHx8IFtdO1xuICBjb25zdCBhc3NldHMgPSBzdGFjay5hc3NldHM7XG5cbiAgaWYgKGFzc2V0cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBpZiAoIXRvb2xraXRJbmZvKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgIHRocm93IG5ldyBFcnJvcihgVGhpcyBzdGFjayB1c2VzIGFzc2V0cywgc28gdGhlIHRvb2xraXQgc3RhY2sgbXVzdCBiZSBkZXBsb3llZCB0byB0aGUgZW52aXJvbm1lbnQgKFJ1biBcIiR7Y29sb3JzLmJsdWUoXCJjZGsgYm9vdHN0cmFwIFwiICsgc3RhY2suZW52aXJvbm1lbnQhLm5hbWUpfVwiKWApO1xuICB9XG5cbiAgbGV0IHBhcmFtcyA9IG5ldyBBcnJheTxDbG91ZEZvcm1hdGlvbi5QYXJhbWV0ZXI+KCk7XG4gIGZvciAoY29uc3QgYXNzZXQgb2YgYXNzZXRzKSB7XG4gICAgLy8gRklYTUU6IFNob3VsZCBoYXZlIGV4Y2x1ZGVkIGJ5IGNvbnN0cnVjdCBwYXRoIGhlcmUgaW5zdGVhZCBvZiBieSB1bmlxdWUgSUQsIHByZWZlcmFibHkgdXNpbmdcbiAgICAvLyBtaW5pbWF0Y2ggc28gd2UgY2FuIHN1cHBvcnQgZ2xvYnMuIE1heWJlIHRha2UgdXAgZHVyaW5nIGFydGlmYWN0IHJlZmFjdG9yaW5nLlxuICAgIGNvbnN0IHJldXNlQXNzZXQgPSByZXVzZS5pbmRleE9mKGFzc2V0LmlkKSA+IC0xO1xuXG4gICAgaWYgKHJldXNlQXNzZXQpIHtcbiAgICAgIGRlYnVnKGBQcmVwYXJpbmcgYXNzZXQgJHthc3NldC5pZH06ICR7SlNPTi5zdHJpbmdpZnkoYXNzZXQpfSAocmV1c2luZylgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoYFByZXBhcmluZyBhc3NldCAke2Fzc2V0LmlkfTogJHtKU09OLnN0cmluZ2lmeShhc3NldCl9YCk7XG4gICAgfVxuXG4gICAgaWYgKCFzdGFjay5hc3NlbWJseSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkOiBzdGFjayBhc3NlbWJseSBpcyByZXF1aXJlZCBpbiBvcmRlciB0byBmaW5kIGFzc2V0cyBpbiBhc3NlbWx5IGRpcmVjdG9yeWApO1xuICAgIH1cblxuICAgIGNvbnN0IGFzc2VtYmx5RGlyID0gc3RhY2suYXNzZW1ibHkuZGlyZWN0b3J5O1xuICAgIHBhcmFtcyA9IHBhcmFtcy5jb25jYXQoYXdhaXQgcHJlcGFyZUFzc2V0KGFzc2VtYmx5RGlyLCBhc3NldCwgdG9vbGtpdEluZm8sIHJldXNlQXNzZXQpKTtcbiAgfVxuXG4gIHJldHVybiBwYXJhbXM7XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbmFzeW5jIGZ1bmN0aW9uIHByZXBhcmVBc3NldChhc3NlbWJseURpcjogc3RyaW5nLCBhc3NldDogY3hhcGkuQXNzZXRNZXRhZGF0YUVudHJ5LCB0b29sa2l0SW5mbzogVG9vbGtpdEluZm8sIHJldXNlOiBib29sZWFuKTogUHJvbWlzZTxDbG91ZEZvcm1hdGlvbi5QYXJhbWV0ZXJbXT4ge1xuICBzd2l0Y2ggKGFzc2V0LnBhY2thZ2luZykge1xuICAgIGNhc2UgJ3ppcCc6XG4gICAgICByZXR1cm4gYXdhaXQgcHJlcGFyZVppcEFzc2V0KGFzc2VtYmx5RGlyLCBhc3NldCwgdG9vbGtpdEluZm8sIHJldXNlKTtcbiAgICBjYXNlICdmaWxlJzpcbiAgICAgIHJldHVybiBhd2FpdCBwcmVwYXJlRmlsZUFzc2V0KGFzc2VtYmx5RGlyLCBhc3NldCwgdG9vbGtpdEluZm8sIHJldXNlKTtcbiAgICBjYXNlICdjb250YWluZXItaW1hZ2UnOlxuICAgICAgcmV0dXJuIGF3YWl0IHByZXBhcmVDb250YWluZXJBc3NldChhc3NlbWJseURpciwgYXNzZXQsIHRvb2xraXRJbmZvLCByZXVzZSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgcGFja2FnaW5nIHR5cGU6ICR7KGFzc2V0IGFzIGFueSkucGFja2FnaW5nfS4gWW91IG1pZ2h0IG5lZWQgdG8gdXBncmFkZSB5b3VyIGF3cy1jZGsgdG9vbGtpdCB0byBzdXBwb3J0IHRoaXMgYXNzZXQgdHlwZS5gKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBwcmVwYXJlWmlwQXNzZXQoXG4gICAgYXNzZW1ibHlEaXI6IHN0cmluZyxcbiAgICBhc3NldDogY3hhcGkuRmlsZUFzc2V0TWV0YWRhdGFFbnRyeSxcbiAgICB0b29sa2l0SW5mbzogVG9vbGtpdEluZm8sXG4gICAgcmV1c2U6IGJvb2xlYW4pOiBQcm9taXNlPENsb3VkRm9ybWF0aW9uLlBhcmFtZXRlcltdPiB7XG5cbiAgaWYgKHJldXNlKSB7XG4gICAgcmV0dXJuIGF3YWl0IHByZXBhcmVGaWxlQXNzZXQoYXNzZW1ibHlEaXIsIGFzc2V0LCB0b29sa2l0SW5mbywgcmV1c2UpO1xuICB9XG5cbiAgY29uc3QgZGlyUGF0aCA9IHBhdGguaXNBYnNvbHV0ZShhc3NldC5wYXRoKSA/IGFzc2V0LnBhdGggOiBwYXRoLmpvaW4oYXNzZW1ibHlEaXIsIGFzc2V0LnBhdGgpO1xuXG4gIGlmICghKGF3YWl0IGZzLnBhdGhFeGlzdHMoZGlyUGF0aCkpIHx8ICEoYXdhaXQgZnMuc3RhdChkaXJQYXRoKSkuaXNEaXJlY3RvcnkoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGZpbmQgZGlyZWN0b3J5OiAke2RpclBhdGh9YCk7XG4gIH1cblxuICBkZWJ1ZygnUHJlcGFyaW5nIHppcCBhc3NldCBmcm9tIGRpcmVjdG9yeTonLCBkaXJQYXRoKTtcbiAgY29uc3Qgc3RhZ2luZyA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnY2RrLWFzc2V0cycpKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBhcmNoaXZlRmlsZSA9IHBhdGguam9pbihzdGFnaW5nLCAnYXJjaGl2ZS56aXAnKTtcbiAgICBhd2FpdCB6aXBEaXJlY3RvcnkoZGlyUGF0aCwgYXJjaGl2ZUZpbGUpO1xuICAgIGRlYnVnKCd6aXAgYXJjaGl2ZTonLCBhcmNoaXZlRmlsZSk7XG4gICAgcmV0dXJuIGF3YWl0IHByZXBhcmVGaWxlQXNzZXQoYXNzZW1ibHlEaXIsIGFzc2V0LCB0b29sa2l0SW5mbywgcmV1c2UsIGFyY2hpdmVGaWxlLCAnYXBwbGljYXRpb24vemlwJyk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmVtb3ZlKHN0YWdpbmcpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIGFzc2V0IFRoZSBhc3NldCBkZXNjcmlwdG9yXG4gKiBAcGFyYW0gdG9vbGtpdEluZm8gVGhlIHRvb2xraXQgc3RhY2tcbiAqIEBwYXJhbSBmaWxlUGF0aCBBbHRlcm5hdGl2ZSBmaWxlIHBhdGggdG8gdXNlIChpbnN0ZWFkIG9mIGFzc2V0LnBhdGgpXG4gKiBAcGFyYW0gY29udGVudFR5cGUgQ29udGVudC10eXBlIHRvIHVzZSB3aGVuIHVwbG9hZGluZyB0byBTMyAobm9uZSB3aWxsIGJlIHNwZWNpZmllZCBieSBkZWZhdWx0KVxuICovXG5hc3luYyBmdW5jdGlvbiBwcmVwYXJlRmlsZUFzc2V0KFxuICAgIGFzc2VtYmx5RGlyOiBzdHJpbmcsXG4gICAgYXNzZXQ6IGN4YXBpLkZpbGVBc3NldE1ldGFkYXRhRW50cnksXG4gICAgdG9vbGtpdEluZm86IFRvb2xraXRJbmZvLFxuICAgIHJldXNlOiBib29sZWFuLFxuICAgIGZpbGVQYXRoPzogc3RyaW5nLFxuICAgIGNvbnRlbnRUeXBlPzogc3RyaW5nKTogUHJvbWlzZTxDbG91ZEZvcm1hdGlvbi5QYXJhbWV0ZXJbXT4ge1xuXG4gIGlmIChyZXVzZSkge1xuICAgIHJldHVybiBbXG4gICAgICB7IFBhcmFtZXRlcktleTogYXNzZXQuczNCdWNrZXRQYXJhbWV0ZXIsIFVzZVByZXZpb3VzVmFsdWU6IHRydWUgfSxcbiAgICAgIHsgUGFyYW1ldGVyS2V5OiBhc3NldC5zM0tleVBhcmFtZXRlciwgVXNlUHJldmlvdXNWYWx1ZTogdHJ1ZSB9LFxuICAgICAgeyBQYXJhbWV0ZXJLZXk6IGFzc2V0LmFydGlmYWN0SGFzaFBhcmFtZXRlciwgVXNlUHJldmlvdXNWYWx1ZTogdHJ1ZSB9LFxuICAgIF07XG4gIH1cblxuICBmaWxlUGF0aCA9IGZpbGVQYXRoIHx8IGFzc2V0LnBhdGg7XG5cbiAgaWYgKCFwYXRoLmlzQWJzb2x1dGUoZmlsZVBhdGgpKSB7XG4gICAgZmlsZVBhdGggPSBwYXRoLmpvaW4oYXNzZW1ibHlEaXIsIGZpbGVQYXRoKTtcbiAgfVxuXG4gIGRlYnVnKCdQcmVwYXJpbmcgZmlsZSBhc3NldDonLCBmaWxlUGF0aCk7XG5cbiAgY29uc3QgZGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKGZpbGVQYXRoKTtcblxuICBjb25zdCBzM0tleVByZWZpeCA9IGBhc3NldHMvJHthc3NldC5pZH0vYDtcblxuICBjb25zdCB7IGZpbGVuYW1lLCBrZXksIGNoYW5nZWQsIGhhc2ggfSA9IGF3YWl0IHRvb2xraXRJbmZvLnVwbG9hZElmQ2hhbmdlZChkYXRhLCB7XG4gICAgczNLZXlQcmVmaXgsXG4gICAgczNLZXlTdWZmaXg6IHBhdGguZXh0bmFtZShmaWxlUGF0aCksXG4gICAgY29udGVudFR5cGVcbiAgfSk7XG5cbiAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCBhc3NldC5wYXRoKTtcblxuICBjb25zdCBzM3VybCA9IGBzMzovLyR7dG9vbGtpdEluZm8uYnVja2V0TmFtZX0vJHtrZXl9YDtcbiAgZGVidWcoYFMzIHVybCBmb3IgJHtyZWxhdGl2ZVBhdGh9OiAke3MzdXJsfWApO1xuICBpZiAoY2hhbmdlZCkge1xuICAgIHN1Y2Nlc3MoYFVwZGF0ZWQ6ICR7Y29sb3JzLmJvbGQocmVsYXRpdmVQYXRoKX0gKCR7YXNzZXQucGFja2FnaW5nfSlgKTtcbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZyhgVXAtdG8tZGF0ZTogJHtjb2xvcnMuYm9sZChyZWxhdGl2ZVBhdGgpfSAoJHthc3NldC5wYWNrYWdpbmd9KWApO1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICB7IFBhcmFtZXRlcktleTogYXNzZXQuczNCdWNrZXRQYXJhbWV0ZXIsIFBhcmFtZXRlclZhbHVlOiB0b29sa2l0SW5mby5idWNrZXROYW1lIH0sXG4gICAgeyBQYXJhbWV0ZXJLZXk6IGFzc2V0LnMzS2V5UGFyYW1ldGVyLCBQYXJhbWV0ZXJWYWx1ZTogYCR7czNLZXlQcmVmaXh9JHtjeGFwaS5BU1NFVF9QUkVGSVhfU0VQQVJBVE9SfSR7ZmlsZW5hbWV9YCB9LFxuICAgIHsgUGFyYW1ldGVyS2V5OiBhc3NldC5hcnRpZmFjdEhhc2hQYXJhbWV0ZXIsIFBhcmFtZXRlclZhbHVlOiBoYXNoIH0sXG4gIF07XG59XG4iXX0=