"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const lib_1 = require("../../lib");
const stacks_1 = require("../../lib/api/cxapp/stacks");
const context_providers_1 = require("../../lib/context-providers");
const settings_1 = require("../../lib/settings");
const util_1 = require("../util");
test('do not throw when selecting stack without errors', async () => {
    // GIVEN
    const stacks = testStacks();
    // WHEN
    const selected = await stacks.selectStacks(['withouterrors'], {
        defaultBehavior: stacks_1.DefaultSelection.AllStacks
    });
    stacks.processMetadata(selected);
    // THEN
    expect(selected[0].template.resource).toBe('noerrorresource');
});
test('do throw when selecting stack with errors', async () => {
    // GIVEN
    const stacks = testStacks();
    // WHEN
    const selected = await stacks.selectStacks(['witherrors'], {
        defaultBehavior: stacks_1.DefaultSelection.AllStacks
    });
    // THEN
    expect(() => stacks.processMetadata(selected)).toThrow(/Found errors/);
});
test('select behavior: all', async () => {
    // GIVEN
    const stacks = testStacks();
    // WHEN
    const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.AllStacks });
    // THEN
    expect(x.length).toBe(2);
});
test('select behavior: none', async () => {
    // GIVEN
    const stacks = testStacks();
    // WHEN
    const x = await stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.None });
    // THEN
    expect(x.length).toBe(0);
});
test('select behavior: single', async () => {
    // GIVEN
    const stacks = testStacks();
    // WHEN
    await expect(stacks.selectStacks([], { defaultBehavior: stacks_1.DefaultSelection.OnlySingle }))
        .rejects.toThrow('Since this app includes more than a single stack, specify which stacks to use (wildcards are supported)');
});
describe('AWS::CDK::Metadata', () => {
    test('is generated for relocatable stacks', async () => {
        var _a;
        const stacks = testStacks({ env: `aws://${cxapi.UNKNOWN_ACCOUNT}/${cxapi.UNKNOWN_REGION}`, versionReporting: true });
        const result = await stacks.synthesizeStack('withouterrors');
        const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
        expect(metadata).toEqual({
            Type: 'AWS::CDK::Metadata',
            Properties: {
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                Modules: `${require('../../package.json').name}=${require('../../package.json').version}`
            },
            Condition: 'CDKMetadataAvailable',
        });
        expect((_a = result.template.Conditions) === null || _a === void 0 ? void 0 : _a.CDKMetadataAvailable).toBeDefined();
    });
    test('is generated for stacks in supported regions', async () => {
        const stacks = testStacks({ env: 'aws://012345678912/us-east-1', versionReporting: true });
        const result = await stacks.synthesizeStack('withouterrors');
        const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
        expect(metadata).toEqual({
            Type: 'AWS::CDK::Metadata',
            Properties: {
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                Modules: `${require('../../package.json').name}=${require('../../package.json').version}`
            }
        });
    });
    test('is not generated for stacks in unsupported regions', async () => {
        const stacks = testStacks({ env: 'aws://012345678912/bermuda-triangle-1337', versionReporting: true });
        const result = await stacks.synthesizeStack('withouterrors');
        const metadata = result.template.Resources && result.template.Resources.CDKMetadata;
        expect(metadata).toBeUndefined();
    });
});
test('stop executing if context providers are not making progress', async () => {
    context_providers_1.registerContextProvider('testprovider', class {
        async getValue(_) {
            return 'foo';
        }
    });
    const stacks = new stacks_1.AppStacks({
        configuration: new settings_1.Configuration(),
        aws: new lib_1.SDK({ userAgent: 'aws-cdk/jest' }),
        synthesizer: async () => util_1.testAssembly({
            stacks: [{
                    stackName: 'thestack',
                    template: { resource: 'noerrorresource' },
                }],
            // Always return the same missing keys, synthesis should still finish.
            missing: [
                { key: 'abcdef', props: {}, provider: 'testprovider' }
            ]
        }),
    });
    // WHEN
    await stacks.selectStacks(['thestack'], { defaultBehavior: stacks_1.DefaultSelection.AllStacks });
    // THEN: the test finishes normally});
});
function testStacks({ env, versionReporting = true } = {}) {
    const configuration = new settings_1.Configuration();
    configuration.settings.set(['versionReporting'], versionReporting);
    return new stacks_1.AppStacks({
        configuration,
        aws: new lib_1.SDK({ userAgent: 'aws-cdk/jest' }),
        synthesizer: async () => util_1.testAssembly({
            stacks: [{
                    stackName: 'withouterrors',
                    env,
                    template: { resource: 'noerrorresource' },
                },
                {
                    stackName: 'witherrors',
                    env,
                    template: { resource: 'errorresource' },
                    metadata: {
                        '/resource': [
                            {
                                type: cxapi.ERROR_METADATA_KEY,
                                data: 'this is an error'
                            }
                        ]
                    },
                }]
        }),
    });
}
//# sourceMappingURL=data:application/json;base64,