"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws = require("aws-sdk");
const AWS = require("aws-sdk-mock");
const ami_1 = require("../../lib/context-providers/ami");
AWS.setSDKInstance(aws);
afterEach(done => {
    AWS.restore();
    done();
});
const mockSDK = {
    defaultAccount: () => Promise.resolve('123456789012'),
    defaultRegion: () => Promise.resolve('bermuda-triangle-1337'),
    cloudFormation: () => { throw new Error('Not Mocked'); },
    ec2: () => Promise.resolve(new aws.EC2()),
    ecr: () => { throw new Error('Not Mocked'); },
    route53: () => { throw new Error('Not Mocked'); },
    s3: () => { throw new Error('Not Mocked'); },
    ssm: () => { throw new Error('Not Mocked'); },
};
test('calls DescribeImages on the request', async () => {
    // GIVEN
    let request;
    AWS.mock('EC2', 'describeImages', (params, cb) => {
        request = params;
        return cb(null, { Images: [{ ImageId: 'ami-1234' }] });
    });
    // WHEN
    await new ami_1.AmiContextProviderPlugin(mockSDK).getValue({
        account: '1234',
        region: 'asdf',
        owners: ['some-owner'],
        filters: {
            'some-filter': ['filtered']
        }
    });
    // THEN
    expect(request).toEqual({
        Owners: ['some-owner'],
        Filters: [
            {
                Name: 'some-filter',
                Values: ['filtered'],
            }
        ]
    });
});
test('returns the most recent AMI matching the criteria', async () => {
    // GIVEN
    AWS.mock('EC2', 'describeImages', (_, cb) => {
        return cb(null, {
            Images: [
                {
                    ImageId: 'ami-1234',
                    CreationDate: "2016-06-22T08:39:59.000Z",
                },
                {
                    ImageId: 'ami-5678',
                    CreationDate: "2019-06-22T08:39:59.000Z",
                }
            ]
        });
    });
    // WHEN
    const result = await new ami_1.AmiContextProviderPlugin(mockSDK).getValue({
        account: '1234',
        region: 'asdf',
        filters: {}
    });
    // THEN
    expect(result).toBe('ami-5678');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1pcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYW1pcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLG9DQUFvQztBQUVwQyx5REFBMkU7QUFFM0UsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUV4QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7SUFDZixHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDZCxJQUFJLEVBQUUsQ0FBQztBQUNULENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLEdBQVM7SUFDcEIsY0FBYyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDO0lBQ3JELGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0lBQzdELGNBQWMsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN6QyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pELEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDOUMsQ0FBQztBQUlGLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNyRCxRQUFRO0lBQ1IsSUFBSSxPQUFzQyxDQUFDO0lBQzNDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFLENBQUMsTUFBcUMsRUFBRSxFQUE2QyxFQUFFLEVBQUU7UUFDekgsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNqQixPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLElBQUksOEJBQXdCLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ25ELE9BQU8sRUFBRSxNQUFNO1FBQ2YsTUFBTSxFQUFFLE1BQU07UUFDZCxNQUFNLEVBQUUsQ0FBQyxZQUFZLENBQUM7UUFDdEIsT0FBTyxFQUFFO1lBQ1AsYUFBYSxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQzVCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sQ0FBQyxPQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDdkIsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1FBQ3RCLE9BQU8sRUFBRTtZQUNQO2dCQUNFLElBQUksRUFBRSxhQUFhO2dCQUNuQixNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUM7YUFDckI7U0FDRjtLQUMrQixDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsbURBQW1ELEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDbkUsUUFBUTtJQUNSLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBZ0MsRUFBRSxFQUE2QyxFQUFFLEVBQUU7UUFDcEgsT0FBTyxFQUFFLENBQUMsSUFBSSxFQUFFO1lBQ2QsTUFBTSxFQUFFO2dCQUNOO29CQUNFLE9BQU8sRUFBRSxVQUFVO29CQUNuQixZQUFZLEVBQUUsMEJBQTBCO2lCQUN6QztnQkFDRDtvQkFDRSxPQUFPLEVBQUUsVUFBVTtvQkFDbkIsWUFBWSxFQUFFLDBCQUEwQjtpQkFDekM7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSw4QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDbEUsT0FBTyxFQUFFLE1BQU07UUFDZixNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSxFQUFFO0tBQ1osQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhd3MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkay1tb2NrJztcbmltcG9ydCB7IElTREsgfSBmcm9tICcuLi8uLi9saWIvYXBpJztcbmltcG9ydCB7IEFtaUNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4uLy4uL2xpYi9jb250ZXh0LXByb3ZpZGVycy9hbWknO1xuXG5BV1Muc2V0U0RLSW5zdGFuY2UoYXdzKTtcblxuYWZ0ZXJFYWNoKGRvbmUgPT4ge1xuICBBV1MucmVzdG9yZSgpO1xuICBkb25lKCk7XG59KTtcblxuY29uc3QgbW9ja1NESzogSVNESyA9IHtcbiAgZGVmYXVsdEFjY291bnQ6ICgpID0+IFByb21pc2UucmVzb2x2ZSgnMTIzNDU2Nzg5MDEyJyksXG4gIGRlZmF1bHRSZWdpb246ICgpID0+IFByb21pc2UucmVzb2x2ZSgnYmVybXVkYS10cmlhbmdsZS0xMzM3JyksXG4gIGNsb3VkRm9ybWF0aW9uOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxuICBlYzI6ICgpID0+IFByb21pc2UucmVzb2x2ZShuZXcgYXdzLkVDMigpKSxcbiAgZWNyOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxuICByb3V0ZTUzOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxuICBzMzogKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoJ05vdCBNb2NrZWQnKTsgfSxcbiAgc3NtOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm90IE1vY2tlZCcpOyB9LFxufTtcblxudHlwZSBBd3NDYWxsYmFjazxUPiA9IChlcnI6IEVycm9yIHwgbnVsbCwgdmFsOiBUKSA9PiB2b2lkO1xuXG50ZXN0KCdjYWxscyBEZXNjcmliZUltYWdlcyBvbiB0aGUgcmVxdWVzdCcsIGFzeW5jICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgbGV0IHJlcXVlc3Q6IGF3cy5FQzIuRGVzY3JpYmVJbWFnZXNSZXF1ZXN0O1xuICBBV1MubW9jaygnRUMyJywgJ2Rlc2NyaWJlSW1hZ2VzJywgKHBhcmFtczogYXdzLkVDMi5EZXNjcmliZUltYWdlc1JlcXVlc3QsIGNiOiBBd3NDYWxsYmFjazxhd3MuRUMyLkRlc2NyaWJlSW1hZ2VzUmVzdWx0PikgPT4ge1xuICAgIHJlcXVlc3QgPSBwYXJhbXM7XG4gICAgcmV0dXJuIGNiKG51bGwsIHsgSW1hZ2VzOiBbeyBJbWFnZUlkOiAnYW1pLTEyMzQnIH1dIH0pO1xuICB9KTtcblxuICAvLyBXSEVOXG4gIGF3YWl0IG5ldyBBbWlDb250ZXh0UHJvdmlkZXJQbHVnaW4obW9ja1NESykuZ2V0VmFsdWUoe1xuICAgIGFjY291bnQ6ICcxMjM0JyxcbiAgICByZWdpb246ICdhc2RmJyxcbiAgICBvd25lcnM6IFsnc29tZS1vd25lciddLFxuICAgIGZpbHRlcnM6IHtcbiAgICAgICdzb21lLWZpbHRlcic6IFsnZmlsdGVyZWQnXVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QocmVxdWVzdCEpLnRvRXF1YWwoe1xuICAgIE93bmVyczogWydzb21lLW93bmVyJ10sXG4gICAgRmlsdGVyczogW1xuICAgICAge1xuICAgICAgICBOYW1lOiAnc29tZS1maWx0ZXInLFxuICAgICAgICBWYWx1ZXM6IFsnZmlsdGVyZWQnXSxcbiAgICAgIH1cbiAgICBdXG4gIH0gYXMgYXdzLkVDMi5EZXNjcmliZUltYWdlc1JlcXVlc3QpO1xufSk7XG5cbnRlc3QoJ3JldHVybnMgdGhlIG1vc3QgcmVjZW50IEFNSSBtYXRjaGluZyB0aGUgY3JpdGVyaWEnLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIEFXUy5tb2NrKCdFQzInLCAnZGVzY3JpYmVJbWFnZXMnLCAoXzogYXdzLkVDMi5EZXNjcmliZUltYWdlc1JlcXVlc3QsIGNiOiBBd3NDYWxsYmFjazxhd3MuRUMyLkRlc2NyaWJlSW1hZ2VzUmVzdWx0PikgPT4ge1xuICAgIHJldHVybiBjYihudWxsLCB7XG4gICAgICBJbWFnZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIEltYWdlSWQ6ICdhbWktMTIzNCcsXG4gICAgICAgICAgQ3JlYXRpb25EYXRlOiBcIjIwMTYtMDYtMjJUMDg6Mzk6NTkuMDAwWlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgSW1hZ2VJZDogJ2FtaS01Njc4JyxcbiAgICAgICAgICBDcmVhdGlvbkRhdGU6IFwiMjAxOS0wNi0yMlQwODozOTo1OS4wMDBaXCIsXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBuZXcgQW1pQ29udGV4dFByb3ZpZGVyUGx1Z2luKG1vY2tTREspLmdldFZhbHVlKHtcbiAgICBhY2NvdW50OiAnMTIzNCcsXG4gICAgcmVnaW9uOiAnYXNkZicsXG4gICAgZmlsdGVyczoge31cbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QocmVzdWx0KS50b0JlKCdhbWktNTY3OCcpO1xufSk7XG4iXX0=