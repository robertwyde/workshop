"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const stream_1 = require("stream");
const string_decoder_1 = require("string_decoder");
const stacks_1 = require("../lib/api/cxapp/stacks");
const sdk_1 = require("../lib/api/util/sdk");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
const settings_1 = require("../lib/settings");
const util_1 = require("./util");
const FIXED_RESULT = util_1.testAssembly({
    stacks: [{
            stackName: 'A',
            template: { resource: 'A' },
        },
        {
            stackName: 'B',
            depends: ['A'],
            template: { resource: 'B' },
        },
        {
            stackName: 'C',
            depends: ['A'],
            template: { resource: 'C' },
            metadata: {
                '/resource': [
                    {
                        type: cxapi.ERROR_METADATA_KEY,
                        data: 'this is an error'
                    }
                ]
            }
        }]
});
const appStacks = new stacks_1.AppStacks({
    configuration: new settings_1.Configuration(),
    aws: new sdk_1.SDK(),
    synthesizer: async () => FIXED_RESULT,
});
test('diff can diff multiple stacks', async () => {
    // GIVEN
    const provisioner = {
        async readCurrentTemplate(_stack) {
            return {};
        },
        async deployStack(_options) {
            return { noOp: true, outputs: {}, stackArn: '' };
        }
    };
    const toolkit = new cdk_toolkit_1.CdkToolkit({ appStacks, provisioner });
    const buffer = new StringWritable();
    // WHEN
    const exitCode = await toolkit.diff({
        stackNames: ['B'],
        stream: buffer
    });
    // THEN
    const plainTextOutput = buffer.data.replace(/\x1B\[[0-?]*[ -/]*[@-~]/g, '');
    expect(plainTextOutput).toContain('Stack A');
    expect(plainTextOutput).toContain('Stack B');
    expect(exitCode).toBe(0);
});
test('exits with 1 with diffs and fail set to true', async () => {
    // GIVEN
    const provisioner = {
        async readCurrentTemplate(_stack) {
            return {};
        },
        async deployStack(_options) {
            return { noOp: true, outputs: {}, stackArn: '' };
        }
    };
    const toolkit = new cdk_toolkit_1.CdkToolkit({ appStacks, provisioner });
    const buffer = new StringWritable();
    // WHEN
    const exitCode = await toolkit.diff({
        stackNames: ['A'],
        stream: buffer,
        fail: true
    });
    // THEN
    expect(exitCode).toBe(1);
});
test('throws an error during diffs on stack with error metadata', async () => {
    // GIVEN
    const provisioner = {
        async readCurrentTemplate(_stack) {
            return {};
        },
        async deployStack(_options) {
            return { noOp: true, outputs: {}, stackArn: '' };
        }
    };
    const toolkit = new cdk_toolkit_1.CdkToolkit({ appStacks, provisioner });
    const buffer = new StringWritable();
    // WHEN
    try {
        const exitCode = await toolkit.diff({
            stackNames: ['C'],
            stream: buffer
        });
        // THEN
        expect(exitCode).toBe(1);
    }
    catch (e) {
        expect(e.toString()).toContain('Found errors');
    }
});
class StringWritable extends stream_1.Writable {
    constructor(options = {}) {
        super(options);
        this._decoder = new string_decoder_1.StringDecoder(options && options.defaultEncoding);
        this.data = '';
    }
    _write(chunk, encoding, callback) {
        if (encoding === 'buffer') {
            chunk = this._decoder.write(chunk);
        }
        this.data += chunk;
        callback();
    }
    _final(callback) {
        this.data += this._decoder.end();
        callback();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGlmZi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQXlDO0FBQ3pDLG1DQUFrQztBQUNsQyxtREFBbUU7QUFFbkUsb0RBQW9EO0FBRXBELDZDQUEwQztBQUMxQyxvREFBZ0Q7QUFDaEQsOENBQWdEO0FBQ2hELGlDQUFzQztBQUV0QyxNQUFNLFlBQVksR0FBRyxtQkFBWSxDQUFDO0lBQ2hDLE1BQU0sRUFBRSxDQUFDO1lBQ1AsU0FBUyxFQUFFLEdBQUc7WUFDZCxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1NBQzVCO1FBQ0Q7WUFDRSxTQUFTLEVBQUUsR0FBRztZQUNkLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQztZQUNkLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7U0FDNUI7UUFDRDtZQUNFLFNBQVMsRUFBRSxHQUFHO1lBQ2QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDO1lBQ2QsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBQztZQUMxQixRQUFRLEVBQUU7Z0JBQ1IsV0FBVyxFQUFFO29CQUNYO3dCQUNFLElBQUksRUFBRSxLQUFLLENBQUMsa0JBQWtCO3dCQUM5QixJQUFJLEVBQUUsa0JBQWtCO3FCQUN6QjtpQkFDRjthQUNGO1NBQ0YsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLElBQUksa0JBQVMsQ0FBQztJQUM5QixhQUFhLEVBQUUsSUFBSSx3QkFBYSxFQUFFO0lBQ2xDLEdBQUcsRUFBRSxJQUFJLFNBQUcsRUFBRTtJQUNkLFdBQVcsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLFlBQVk7Q0FDdEMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLCtCQUErQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQy9DLFFBQVE7SUFDUixNQUFNLFdBQVcsR0FBc0I7UUFDckMsS0FBSyxD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TSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMxQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztLQUNoRDtBQUNILENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxjQUFlLFNBQVEsaUJBQVE7SUFJbkMsWUFBWSxVQUFlLEVBQUU7UUFDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDhCQUFhLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQVUsRUFBRSxRQUFnQixFQUFFLFFBQTZDO1FBQ3ZGLElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUN6QixLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFDRCxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQztRQUNuQixRQUFRLEVBQUUsQ0FBQztJQUNiLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBd0M7UUFDcEQsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLFFBQVEsRUFBRSxDQUFDO0lBQ2IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IFdyaXRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IE5vZGVTdHJpbmdEZWNvZGVyLCBTdHJpbmdEZWNvZGVyICB9IGZyb20gJ3N0cmluZ19kZWNvZGVyJztcbmltcG9ydCB7IERlcGxveVN0YWNrT3B0aW9ucywgRGVwbG95U3RhY2tSZXN1bHQgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgQXBwU3RhY2tzIH0gZnJvbSAnLi4vbGliL2FwaS9jeGFwcC9zdGFja3MnO1xuaW1wb3J0IHsgSURlcGxveW1lbnRUYXJnZXQsIFRlbXBsYXRlIH0gZnJvbSAnLi4vbGliL2FwaS9kZXBsb3ltZW50LXRhcmdldCc7XG5pbXBvcnQgeyBTREsgfSBmcm9tICcuLi9saWIvYXBpL3V0aWwvc2RrJztcbmltcG9ydCB7IENka1Rvb2xraXQgfSBmcm9tICcuLi9saWIvY2RrLXRvb2xraXQnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2xpYi9zZXR0aW5ncyc7XG5pbXBvcnQgeyB0ZXN0QXNzZW1ibHkgfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBGSVhFRF9SRVNVTFQgPSB0ZXN0QXNzZW1ibHkoe1xuICBzdGFja3M6IFt7XG4gICAgc3RhY2tOYW1lOiAnQScsXG4gICAgdGVtcGxhdGU6IHsgcmVzb3VyY2U6ICdBJyB9LFxuICB9LFxuICB7XG4gICAgc3RhY2tOYW1lOiAnQicsXG4gICAgZGVwZW5kczogWydBJ10sXG4gICAgdGVtcGxhdGU6IHsgcmVzb3VyY2U6ICdCJyB9LFxuICB9LFxuICB7XG4gICAgc3RhY2tOYW1lOiAnQycsXG4gICAgZGVwZW5kczogWydBJ10sXG4gICAgdGVtcGxhdGU6IHsgcmVzb3VyY2U6ICdDJ30sXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgICcvcmVzb3VyY2UnOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBjeGFwaS5FUlJPUl9NRVRBREFUQV9LRVksXG4gICAgICAgICAgZGF0YTogJ3RoaXMgaXMgYW4gZXJyb3InXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH1dXG59KTtcblxuY29uc3QgYXBwU3RhY2tzID0gbmV3IEFwcFN0YWNrcyh7XG4gIGNvbmZpZ3VyYXRpb246IG5ldyBDb25maWd1cmF0aW9uKCksXG4gIGF3czogbmV3IFNESygpLFxuICBzeW50aGVzaXplcjogYXN5bmMgKCkgPT4gRklYRURfUkVTVUxULFxufSk7XG5cbnRlc3QoJ2RpZmYgY2FuIGRpZmYgbXVsdGlwbGUgc3RhY2tzJywgYXN5bmMgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCBwcm92aXNpb25lcjogSURlcGxveW1lbnRUYXJnZXQgPSB7XG4gICAgYXN5bmMgcmVhZEN1cnJlbnRUZW1wbGF0ZShfc3RhY2s6IGN4YXBpLkNsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCk6IFByb21pc2U8VGVtcGxhdGU+IHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIGFzeW5jIGRlcGxveVN0YWNrKF9vcHRpb25zOiBEZXBsb3lTdGFja09wdGlvbnMpOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG4gICAgICByZXR1cm4geyBub09wOiB0cnVlLCBvdXRwdXRzOiB7fSwgc3RhY2tBcm46ICcnfTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7IGFwcFN0YWNrcywgcHJvdmlzaW9uZXIgfSk7XG4gIGNvbnN0IGJ1ZmZlciA9IG5ldyBTdHJpbmdXcml0YWJsZSgpO1xuXG4gIC8vIFdIRU5cbiAgY29uc3QgZXhpdENvZGUgPSBhd2FpdCB0b29sa2l0LmRpZmYoe1xuICAgIHN0YWNrTmFtZXM6IFsnQiddLFxuICAgIHN0cmVhbTogYnVmZmVyXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgY29uc3QgcGxhaW5UZXh0T3V0cHV0ID0gYnVmZmVyLmRhdGEucmVwbGFjZSgvXFx4MUJcXFtbMC0/XSpbIC0vXSpbQC1+XS9nLCAnJyk7XG4gIGV4cGVjdChwbGFpblRleHRPdXRwdXQpLnRvQ29udGFpbignU3RhY2sgQScpO1xuICBleHBlY3QocGxhaW5UZXh0T3V0cHV0KS50b0NvbnRhaW4oJ1N0YWNrIEInKTtcblxuICBleHBlY3QoZXhpdENvZGUpLnRvQmUoMCk7XG59KTtcblxudGVzdCgnZXhpdHMgd2l0aCAxIHdpdGggZGlmZnMgYW5kIGZhaWwgc2V0IHRvIHRydWUnLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHByb3Zpc2lvbmVyOiBJRGVwbG95bWVudFRhcmdldCA9IHtcbiAgICBhc3luYyByZWFkQ3VycmVudFRlbXBsYXRlKF9zdGFjazogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KTogUHJvbWlzZTxUZW1wbGF0ZT4ge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgYXN5bmMgZGVwbG95U3RhY2soX29wdGlvbnM6IERlcGxveVN0YWNrT3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcbiAgICAgIHJldHVybiB7IG5vT3A6IHRydWUsIG91dHB1dHM6IHt9LCBzdGFja0FybjogJyd9O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHsgYXBwU3RhY2tzLCBwcm92aXNpb25lciB9KTtcbiAgY29uc3QgYnVmZmVyID0gbmV3IFN0cmluZ1dyaXRhYmxlKCk7XG5cbiAgLy8gV0hFTlxuICBjb25zdCBleGl0Q29kZSA9IGF3YWl0IHRvb2xraXQuZGlmZih7XG4gICAgc3RhY2tOYW1lczogWydBJ10sXG4gICAgc3RyZWFtOiBidWZmZXIsXG4gICAgZmFpbDogdHJ1ZVxuICB9KTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChleGl0Q29kZSkudG9CZSgxKTtcbn0pO1xuXG50ZXN0KCd0aHJvd3MgYW4gZXJyb3IgZHVyaW5nIGRpZmZzIG9uIHN0YWNrIHdpdGggZXJyb3IgbWV0YWRhdGEnLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHByb3Zpc2lvbmVyOiBJRGVwbG95bWVudFRhcmdldCA9IHtcbiAgICBhc3luYyByZWFkQ3VycmVudFRlbXBsYXRlKF9zdGFjazogY3hhcGkuQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0KTogUHJvbWlzZTxUZW1wbGF0ZT4ge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgYXN5bmMgZGVwbG95U3RhY2soX29wdGlvbnM6IERlcGxveVN0YWNrT3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcbiAgICAgIHJldHVybiB7IG5vT3A6IHRydWUsIG91dHB1dHM6IHt9LCBzdGFja0FybjogJyd9O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdG9vbGtpdCA9IG5ldyBDZGtUb29sa2l0KHsgYXBwU3RhY2tzLCBwcm92aXNpb25lciB9KTtcbiAgY29uc3QgYnVmZmVyID0gbmV3IFN0cmluZ1dyaXRhYmxlKCk7XG5cbiAgLy8gV0hFTlxuICB0cnkge1xuICAgIGNvbnN0IGV4aXRDb2RlID0gYXdhaXQgdG9vbGtpdC5kaWZmKHtcbiAgICAgIHN0YWNrTmFtZXM6IFsnQyddLFxuICAgICAgc3RyZWFtOiBidWZmZXJcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoZXhpdENvZGUpLnRvQmUoMSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBleHBlY3QoZS50b1N0cmluZygpKS50b0NvbnRhaW4oJ0ZvdW5kIGVycm9ycycpO1xuICB9XG59KTtcblxuY2xhc3MgU3RyaW5nV3JpdGFibGUgZXh0ZW5kcyBXcml0YWJsZSB7XG4gIHB1YmxpYyBkYXRhOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2RlY29kZXI6IE5vZGVTdHJpbmdEZWNvZGVyO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcpO1xuICAgIHRoaXMuZGF0YSA9ICcnO1xuICB9XG5cbiAgcHVibGljIF93cml0ZShjaHVuazogYW55LCBlbmNvZGluZzogc3RyaW5nLCBjYWxsYmFjazogKGVycm9yPzogRXJyb3IgfCB1bmRlZmluZWQpID0+IHZvaWQpIHtcbiAgICBpZiAoZW5jb2RpbmcgPT09ICdidWZmZXInKSB7XG4gICAgICBjaHVuayA9IHRoaXMuX2RlY29kZXIud3JpdGUoY2h1bmspO1xuICAgIH1cbiAgICB0aGlzLmRhdGEgKz0gY2h1bms7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxuXG4gIHB1YmxpYyBfZmluYWwoY2FsbGJhY2s6IChlcnJvcj86IEVycm9yIHwgbnVsbCkgPT4gdm9pZCkge1xuICAgIHRoaXMuZGF0YSArPSB0aGlzLl9kZWNvZGVyLmVuZCgpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn1cbiJdfQ==