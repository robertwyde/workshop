"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const sinon = require("sinon");
const timers_1 = require("timers");
const util_1 = require("util");
const version_1 = require("../lib/version");
const setTimeout = util_1.promisify(timers_1.setTimeout);
function tmpfile() {
    return `/tmp/version-${Math.floor(Math.random() * 10000)}`;
}
afterEach(done => {
    sinon.restore();
    done();
});
test('initialization fails on unwritable directory', () => {
    const cacheFile = tmpfile();
    sinon.stub(fs, 'mkdirsSync').withArgs(path.dirname(cacheFile)).throws('Cannot make directory');
    expect(() => new version_1.VersionCheckTTL(cacheFile)).toThrow(/not writable/);
});
test('cache file responds correctly when file is not present', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 1);
    expect(await cache.hasExpired()).toBeTruthy();
});
test('cache file honours the specified TTL', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 1);
    await cache.update();
    expect(await cache.hasExpired()).toBeFalsy();
    await setTimeout(1001); // Just above 1 sec in ms
    expect(await cache.hasExpired()).toBeTruthy();
});
test('Skip version check if cache has not expired', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
    await cache.update();
    expect(await version_1.latestVersionIfHigher('0.0.0', cache)).toBeNull();
});
test('Return later version when exists & skip recent re-check', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
    const result = await version_1.latestVersionIfHigher('0.0.0', cache);
    expect(result).not.toBeNull();
    expect(result.length).toBeGreaterThan(0);
    const result2 = await version_1.latestVersionIfHigher('0.0.0', cache);
    expect(result2).toBeNull();
});
test('Return null if version is higher than npm', async () => {
    const cache = new version_1.VersionCheckTTL(tmpfile(), 100);
    const result = await version_1.latestVersionIfHigher('100.100.100', cache);
    expect(result).toBeNull();
});
test('No homedir for the given user', () => {
    sinon.stub(os, 'homedir').returns('');
    sinon.stub(os, 'userInfo').returns({ username: '', uid: 10, gid: 11, shell: null, homedir: '' });
    expect(() => new version_1.VersionCheckTTL()).toThrow(/Cannot determine home directory/);
});
test('Version specified is stored in the TTL file', async () => {
    const cacheFile = tmpfile();
    const cache = new version_1.VersionCheckTTL(cacheFile, 1);
    await cache.update('1.1.1');
    const storedVersion = fs.readFileSync(cacheFile, 'utf8');
    expect(storedVersion).toBe('1.1.1');
});
test('No Version specified for storage in the TTL file', async () => {
    const cacheFile = tmpfile();
    const cache = new version_1.VersionCheckTTL(cacheFile, 1);
    await cache.update();
    const storedVersion = fs.readFileSync(cacheFile, 'utf8');
    expect(storedVersion).toBe('');
});
//# sourceMappingURL=data:application/json;base64,